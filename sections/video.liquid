{{ 'video-section.css' | asset_url | stylesheet_tag }}
{{ 'component-deferred-media.css' | asset_url | stylesheet_tag }}

{%- liquid
  assign video_id = section.settings.video.id | default: section.settings.video_url.id
  assign video_alt = section.settings.video.alt | default: section.settings.description
  assign alt = 'sections.video.load_video' | t: description: video_alt | escape
  assign poster = section.settings.video.preview_image | default: section.settings.cover_image

  if section.settings.video != null
    assign ratio_diff = section.settings.video.aspect_ratio | minus: poster.aspect_ratio | abs
    if ratio_diff < 0.01 and ratio_diff > 0
      assign fix_ratio = true
    endif
  endif
-%}

<section class="single-video">
  <div class="video-section isolate page-width">
    <h2 class="screen-reader-text">{{ section.settings.screen-reader-text}}</h2>
    <div class="single-video__logo">
			{% if section.settings.image != blank %}
        <img
          src="{{ section.settings.image | img_url: 'original' }}"
          alt="" 
        >
      {% endif %}
		</div>
    <div id="iframe">
      {%- if section.settings.video == null and section.settings.video_url != null -%}
        {%- liquid
          assign loop = ''
          if section.settings.enable_video_looping
            assign loop = '&loop=1&playlist=' | append: video_id
          endif
        -%}
        {%- if section.settings.video_url.type == 'youtube' -%}
          <iframe
            src="https://www.youtube.com/embed/{{ video_id }}?enablejsapi=1&autoplay=1&mute=1{{ loop }}"
            class="js-youtube"
            allow="autoplay; encrypted-media"
            allowfullscreen
            title="{{ section.settings.description | escape }}"
          ></iframe>

        {%- else -%}
          <iframe
            src="https://player.vimeo.com/video/{{ video_id }}?autoplay=1&mute=1{{ loop }}"
            class="js-vimeo"
            allow="autoplay; encrypted-media"
            allowfullscreen
            title="{{ section.settings.description | escape }}"
          ></iframe>
        {%- endif -%}
      {%- else -%}
        {{
          section.settings.video
          | video_tag:
            image_size: '1100x',
            autoplay: true,
            loop: section.settings.enable_video_looping,
            controls: true,
            muted: false
        }}
      {%- endif -%}
    </div>
  </div>
</section>
<script>
  document.addEventListener('DOMContentLoaded', function () {
    function controlVideo(vidFunc) {
      var iframe = document.getElementsByTagName("iframe")[0].contentWindow;
      iframe.postMessage('{"event":"command","func":"' + vidFunc + '","args":""}', '*');
    }

    var video = document.getElementById('iframe');
    var isPlaying = false;

    var options = {
      root: null,
      rootMargin: '0px',
      threshold: 0.5, 
    };

    var observer = new IntersectionObserver(handleIntersect, options);

    function handleIntersect(entries, observer) {
      entries.forEach(function (entry) {
        if (entry.isIntersecting) {
          if (!isPlaying) {
            controlVideo('playVideo');
            isPlaying = true;
          }
        } else {
          if (isPlaying) {
            controlVideo('pauseVideo');
            isPlaying = false;
          }
        }
      });
    }

    observer.observe(video);
  });
</script>


{% schema %}
{
  "name": "t:sections.video.name",
  "tag": "section",
  "class": "section",
  "settings": [
    {
      "type": "image_picker",
      "id": "image",
      "label": "Image"
    },
    {
      "type": "text",
      "id": "screen-reader-text",
      "label": "Hidden Main Title"
    },
    {
      "type": "video",
      "id": "video",
      "label": "t:sections.video.settings.video.label"
    },
    {
      "type": "video_url",
      "id": "video_url",
      "accept": ["youtube", "vimeo"],
      "default": "https://www.youtube.com/watch?v=_9VUPq3SxOc",
      "label": "t:sections.video.settings.video_url.label",
      "info": "t:sections.video.settings.video_url.info"
    }
  ],
  "presets": [
    {
      "name": "t:sections.video.presets.name"
    }
  ]
}
{% endschema %}
